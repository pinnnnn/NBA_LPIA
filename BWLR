############################################################################
# this file is to "read" the variance of the last year, predict with BGLR  #
############################################################################

#### notice that the directory was set in "~/NBA/BWLR"
#### and the all_play file and other index files were put in "~/NBA/find player new 2.0/"

library(magrittr)
library(dplyr)
library(data.table)
library(BGLR)
library(reshape2)

setwd("~/NBA/BWLR")   

fac2cha = function(x){
  if(!is.factor(x)) {
    warning("object is not factor")
    return(x)
  } else {
    return(levels(x)[x])
  }
}

andrew = function(data, name, player = T){      ###### andrew is to generate the incident matrix of players
  if(player){
    out.p.combination <-
      strsplit(data$p.combination, ", ") %>%
      sapply(., function(x) {
        name %in% x
      }) %>%
      t %>%
      set_colnames(paste0("O_", name)) %>%
      plyr::mapvalues(., c(T, F), c(1L, 0L))
    out.p.com.allowed <-
      strsplit(data$p.com.allowed, ", ") %>%
      sapply(., function(x) {
        name %in% x
      }) %>%
      t %>%
      set_colnames(paste0("D_", name)) %>%
      plyr::mapvalues(., c(T, F), c(-1L, 0L))
    out.home <- (fac2cha(data$home) == "H") %>% 
      plyr::mapvalues(., c(T, F), to = c(1L, 0L))
    out <- cbind(out.p.combination, 
                 out.p.com.allowed,
                 out.home)
  } else {
    out.off.team <- 
      sapply(data$team, function(x){
        name %in% x
      }) %>% t %>% 
      set_colnames(paste0("O_", name)) %>% 
      plyr::mapvalues(., c(T,F), c(1L, 0L))
    out.def.team <- 
      sapply(data$def.team, function(x){
        name %in% x
      }) %>% t %>% 
      set_colnames(paste0("D_", name)) %>% 
      plyr::mapvalues(., c(T, F), c(-1L, 0L))
    out <- cbind(out.off.team, out.def.team)
    rownames(out) <- NULL
  }
  return(out)
}



total.analysis = function(beta, play.test, points.hat){
  error = play.test$points - points.hat
  
  
  
  
  ##
  win.team = tapply(play.test$win.team %>% as.character(),
                    play.test$game.id %>% as.character(), unique)
  home.team = tapply(play.test$home.team %>% as.character(),
                     play.test$game.id %>% as.character(), unique)
  
  answer = data.frame(game.id = names(win.team),
                      win.team = win.team,
                      home.team = home.team,
                      answer = win.team == home.team)
  row.names(answer) = NULL
  setorder(answer,game.id)
  
  game.index = tapply(1:dim(play.test)[1], play.test$game.id %>% as.character(),
                      function(x)min(x):max(x))
  p.game = sapply(game.index,function(x){
    play.test$points[x]
  })
  p.game.hat = sapply(game.index, function(x){
    points.hat[x]
  })
  h.game = sapply(game.index,function(x){
    play.test$home[x] == "H"
  })
  out.game = list()
  for(i in 1:length(p.game)){
    point.home = p.game[[i]][h.game[[i]]] %>% sum()
    point.away = p.game[[i]][!h.game[[i]]] %>% sum()
    
    point.home.hat = p.game.hat[[i]][h.game[[i]]] %>% sum()
    point.away.hat = p.game.hat[[i]][!h.game[[i]]] %>% sum()
    out.game[[i]] = data.table(game_id = names(p.game)[i],
                               point_home = point.home,
                               point_away = point.away, 
                               point_home_hat = point.home.hat,
                               point_away_hat = point.away.hat)
  }
  out.game = bind_rows(out.game)
  
  
  out.game = mutate(out.game, 
                    diff = point_home-point_away, 
                    diff.hat = point_home_hat-point_away_hat,
                    win = ((point_home-point_away)>0)*1,
                    win.hat = ((point_home_hat-point_away_hat)>0)*1,
                    answer = (diff*diff.hat > 0))
  
  acc = (which(out.game$answer==T) %>% length())/dim(out.game)[1]
  e = out.game$diff-out.game$diff.hat
  rmse.game = sqrt(t(e)%*%e/length(e))
  rmse.poss = sqrt(t(error)%*%error/length(error))
  corr = cor(out.game$diff, out.game$diff.hat)
  
  return(list(out.game=out.game,
              rmse.game = rmse.game,
              rmse.poss = rmse.poss,
              accuracy = acc,
              corr = corr))
}

### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### 


all.play = read.table("~/NBA/find player new 2.0/all_play_corr.txt", header = T)
season.index = read.table("~/NBA/find player new 2.0/season.index.txt",
                          header = F) %>% "["(,1)
train.index = read.table("~/NBA/find player new 2.0/train_index.txt") %>% "["(,1)

all.play$diff = all.play$home.score - all.play$away.score
all.play$home.win = ( (all.play$win.team %>% as.character()) ==
                        (all.play$home.team %>% as.character()) ) %>% 
  plyr::mapvalues(., c(T,F), c(1L,0L))



# set range of data
player.threshold = 1000             
combi.threshold = 20
#s.id = (season.index[1]+1):season.index[2]        ##### you have to choose the right indices corresponding to the right season
#train.id = (season.index[1]+1):(train.index[2]-1)
#test.id = train.index[2]:season.index[2]
s.id = 1:season.index[1]
train.id = 1:(train.index[1]-1)
test.id = train.index[1]:season.index[1]
outtest.id = (1:max(test.id))[-test.id]
#


p.time.raw = group_by(all.play[outtest.id,], diff, game.elapsed) %>% 
  dplyr::summarise(sum.points = sum(points),
                   n.points = length(points),
                   ss.points = sum(points^2))





# wide data to long data
p.var = read.table("p_var.txt")
p.var = data.frame(game_elapsed = rownames(p.var),
                   as.data.frame(p.var))

colnames(p.var) = gsub("X\\.","-",colnames(p.var)) %>% 
  gsub("X", "", .)

v.long0 = reshape2::melt(p.var, id.vars = "game_elapsed")
colnames(v.long0)[2] = "diff"
v.long0$diff = fac2cha(v.long0$diff) %>%
  as.numeric()
v.long0$game_elapsed = fac2cha(v.long0$game_elapsed) %>% 
  as.numeric()

v.long0$value = plyr::mapvalues(v.long0$value,
                                NA, 0) %>% 
  plyr::mapvalues(.,0, max(.))      ## replace 0,NA to max(variance)
#



# make factor to character and create def.team
all.play$p.com.allowed = fac2cha(all.play$p.com.allowed)
all.play$p.combination = fac2cha(all.play$p.combination)
all.play$team = fac2cha(all.play$team)
all.play$home.team = fac2cha(all.play$home.team)
all.play$away.team = fac2cha(all.play$away.team)
all.play$home = fac2cha(all.play$home)

tmp = cbind(all.play$team,
            all.play$home.team,
            all.play$away.team)
all.play$def.team = apply(tmp, 1, function(x){
  x[2:3][!(x[2:3] %in% x[1])]
})
#

# merge variance and all.play
all.play = dplyr::left_join(all.play, v.long0,
                            by = c("game.elapsed" = "game_elapsed",
                                   "diff"))
colnames(all.play) = gsub("^value$", "variance", 
                          colnames(all.play))
#



# find "player.enough"
season.play = all.play[s.id,]

season.off.player = season.play$p.combination %>% 
  strsplit(., ", ") %>% do.call(c, .)
season.off.player = season.off.player[season.off.player!=""] 

season.def.player = season.play$p.com.allowed  %>% 
  strsplit(., ", ") %>% do.call(c, .)
season.def.player = season.def.player[season.def.player!=""]

player.off.poss = table(season.off.player)
player.def.poss = table(season.def.player)

which(player.off.poss>=player.threshold) %>% length()
which(player.def.poss>=player.threshold) %>% length()


player.enough = 
  intersect(names(player.off.poss[which(player.off.poss >= player.threshold)]),
            names(player.def.poss[which(player.def.poss >= player.threshold)]))  

team = all.play$team %>% unique 
#



# model
niter = 5000
nburn = 1000
thin = 10


X = andrew(season.play, player.enough, player = T)
Y = andrew(season.play, team, player = F)
XR = cbind(X,Y) 


for(i in 1:ncol(XR)){
  print(cbind(colnames(XR)[i],
              class(XR[,i])))
}


P = 2*length(player.enough)
M = 2*length(season.play$team %>% 
               fac2cha() %>% unique())
tau = 1/season.play$variance
N = length(train.id)
points = season.play$points

train_s.id = which(s.id %in% train.id)
test_s.id = which(s.id %in% test.id)

start = Sys.time()

BWLR = BLR(y = points[train_s.id], XR = XR[train_s.id,], weights = tau[train_s.id],
                prior =
                  list(varE = list(df = 4, S = 1) ,  #### the hyperparameters in scaled inverse chi-square dist. are set as (4, 1)
                       varBR = list(df = 4, S = 1)),
                nIter = niter, burnIn = nburn, 
                thin = 10)
yhat = BWLR$mu + XR[test_s.id,] %*% BWLR$bR
out = total.analysis(beta = c(BWLR$mu, BWLR$bR),
                         play.test = all.play[test.id,],
                         points.hat = yhat)



save(BWLR,file = "BWLR_1314.rda")
Sys.time() - start
#
